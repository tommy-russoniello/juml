Team Rocket UML Editor

1) Problem statement
Create an editor that will allow the user to build and modify UML documents.

2) System Personnel

	2.1) Description of Users
	The users will be anyone who wishes to build UML documents, including the developers

	2.2) Description of System Developers
	The developers will be Sam Carroll, Torrance Graham, Quinn Minnich, Tommy Russoniello

3) Operational Setting

	3.1) Target Platforms
	The application will be designed to be portable to many platforms, including Mac, Windows, and
	Linux

	3.2) Required Software Environment
	Java must be installed on any device that uses this program

	3.3) Useful Optional Software Environment
	None.

4) Functional Requirements

	4.1) Functional Description

		4.1.4) Overview
		A graphical interface where the user can draw points and connect the points with lines.

		4.1.2) Feature List
		Ability to switch between several different “modes”
		Ability to draw points on the canvas
		Ability to draw solid lines between existing points on the canvas
		The x and y coordinates of all mouse clicks are printed to the console
		The current mode is printed to the console whenever it is changed.

	4.2) User Interface

		4.2.1) Overview
		On the left side of the screen will be a menu from which the user can select from several
		different drawing modes. On the right side of the screen will be an inspector to show details of
		currently selected items. The rest of the space in the middle of the screen is the canvas where
		the user can create points and lines.

		4.2.2) Menus
		There will be a menu called the object builder on the left side of the screen which will allow
		the user to select what type of drawing mode they want (points, lines, or select mode). The menu
		will be collapsible to allow for more space to draw on the canvas. Additionally, there will be a
		toolbar at the top of the screen with file, edit, and help menus, although no features for these
		menus are yet supported except for the exit button.

		4.2.3) Windows
		There will only be the main window, which will be divided into sections for a menu on the left,
		an inspector on the right, and a canvas in the middle. The window will be resizable if the user
		wishes to have mode space to draw.

		4.2.4) Inspectors
		There will be one inspector on the right side of the screen which currently does nothing. The
		inspector will be collapsible to allow for more space to draw on the canvas

	4.3) Use Cases

		4.3.1) Use Case 1: Draw a point on the canvas
		•	User clicks “Point” button in the object builder; system sets internal mode to POINT
		•	User clicks on canvas; system creates a circle on the canvas at the location of the click

		4.3.2) Use Case 2: Draw a Line between existing points
		Preconditions: User has already placed at least two points in the scene (see Use Case 1).

		•	User clicks “Line” button in the object builder; system sets internal mode to LINE.
		•	User clicks an exiting point on the canvas; system stores the coordinates of the click.
		•	User clicks on another point; system draws a line between the stored coordinates and the
			current coordinates of the mouse.

	4.4) Other Interfaces

5) Non-Functional Requirements

	5.1) Reliability

	5.2) Performance

	5.3) Usability

	5.4) Portability

6) Future Enhancements

In the future, the application will be expanded to allow for deleting points and lines that have
been placed, for creating classes and more complex items, and for displaying more details about each
item through the inspector. Load and save features will also be supported.  
