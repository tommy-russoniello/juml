JUML

Problem statement
Create an editor that will allow the user to create and modify UML documents.
System Personnel

Description of Users
The users will be anyone who wishes to build UML documents, including the developers
Description of System Developers
The developers will be Sam Carroll, Torrance Graham, Quinn Minnich, and Tommy Russoniello
Operational Setting

Target Platforms
The application will be designed to be potable to many platforms, including Mac, Windows, and Linux

Required Software Environment
Java must be installed on any device that uses this program
Useful Optional Software Environment
None.
Functional Requirements

Functional Description
Overview
A graphical interface where the user can draw and remove points and class boxes. In addition, the
user should be able to connect the objects.
Feature List
Ability to switch between several different “modes”
Ability to draw points on the canvas
Ability to draw class boxes on the canvas
Ability to draw solid lines between existing points and or class boxes on the canvas
The x and y coordinates of all mouse clicks are printed to the console
The current mode is printed to the console whenever it is changed.
Ability to delete an object or connector
User Interface

Overview
On the left side of the screen will be a menu from which the user can select from several different
drawing modes as well as a select and delete mode. On the right side of the screen will be an
inspector to show details of currently selected items. The rest of the space in the middle of the
screen is the canvas where the user can create objects and lines.
Menus
There will be a menu called the object builder on the left side of the screen which will allow the
user to select what type of drawing mode they want (points, lines, class box, select, or delete
mode). The menu will be collapsible. Additionally, there will be a toolbar at the top of the screen
with file, edit, and help menus, although no features for these menus are yet supported except for
the exit and new file buttons.
Windows
There will only be the main window, which will be divided into sections for a menu on the left, an
inspector on the right, and a canvas in the middle. The window will be resizable if the user wishes
to have mode space to draw.
Inspectors
There will be one inspector on the right side of the screen which currently does nothing. The
inspector will be collapsible to allow for more space to draw on the canvas
Use Cases

Use Case 1: Draw a point on the canvas
User clicks “Point” button in the object builder; system sets internal mode to POINT
User clicks on canvas; system creates a circle on the canvas at the location of the click
Use Case 2: Draw a class box on the canvas
The user clicks the “Class Box” button in the object builder. The system sets its internal mode to
Class Box. The user clicks on the canvas and the system creates a v-box containing three text fields
for the three sections of the UML class box as well as two small rectangles that act as separators
between the sections.
Use Case 3: Draw a line between existing points
Preconditions: User has already placed at least two points on the canvas (see Use Case 1).

User clicks “Line” button in the object builder; system sets internal mode to LINE.
User clicks an existing point on the canvas; system stores the coordinates of the click.
User clicks on another point; system draws a line between the stored coordinates and the current
coordinates of the mouse.
Use Case 4: Delete an Existing Point
Preconditions: User has already placed at least one point on the canvas (see Use Case 1).

The User clicks “Delete” button in the object builder. The system then sets its internal mode to
DELETE.
The User clicks an existing point on the canvas. The system erases the point of the click from the
canvas as well as any lines that were connected to the clicked point.
Use Case 5: Dragging an Existing Object
Preconditions: User has at least one point or class box on the canvas (see Use Cases 1 and 2)

The user clicks the “Select” button in the object builder. The system then sets its internal mode
to SELECT.
The user clicks and does not release the click on the desired object to be dragged. The system
recognizes the object has been selected.
As the user moves the cursor, the object is dragged, as well as all lines connected to the object.
The system continuously updates the coordinates of the object as it is being dragged.
Once the user releases the click, the object is moved to that place.
The system was continuously updating the coordinates and has the correct coordinates of the object.
Use Case 5: Displaying object Information
Preconditions: User has at least one point or class box on the canvas (see Use Cases 1 and 2)

The user clicks the “Select” button in the object builder. The system then sets its internal mode
to SELECT.
The user clicks on an existing objects and when the click is released, the system displays the
inspector which holds the corresponding attributes to the object clicked.

Other Interfaces

Non-Functional Requirements

Reliability

Performance

Usability

Portability

Future Enhancements

In the last iteration, we would like to add functionality to be able to load and save files in the
program. This has been something that has been slowly progressing since iteration 1. We would also
like to add the various types of relationships between class boxes. This is a crucial part of UML
notation and currently only a solid line is supported. We would like the inspector to work for all
objects, and allow for the changing of attributes of the selected object. We would also like to
implement an undo feature as well as potentially a redo feature. 
